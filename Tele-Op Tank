/*
Copyright (c) 2016 Robert Atkinson

All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted (subject to the limitations in the disclaimer below) provided that
the following conditions are met:

Redistributions of source code must retain the above copyright notice, this list
of conditions and the following disclaimer.

Redistributions in binary form must reproduce the above copyright notice, this
list of conditions and the following disclaimer in the documentation and/or
other materials provided with the distribution.

Neither the name of Robert Atkinson nor the names of his contributors may be used to
endorse or promote products derived from this software without specific prior
written permission.

NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS
LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESSFOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/
package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.OpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.util.ElapsedTime;
import com.qualcomm.robotcore.util.Range;

/**
 * This file contains an example of an iterative (Non-Linear) "OpMode".
 * An OpMode is a 'program' that runs in either the autonomous or the teleop period of an FTC match.
 * The names of OpModes appear on the menu of the FTC Driver Station.
 * When an selection is made from the menu, the corresponding OpMode
 * class is instantiated on the Robot Controller and executed.
 *
 * This particular OpMode just executes a basic Tank Drive Teleop for a PushBot
 * It includes all the skeletal structure that all iterative OpModes contain.
 *
 * Use Android Studios to Copy this Class, and Paste it into your team's code folder with a new name.
 * Remove or comment out the @Disabled line to add this opmode to the Driver Station OpMode list
 */

@TeleOp(name="Teleop 11155 OpMode Tank Control", group="Iterative Opmode")  // @Autonomous(...) is the other common choice
// change teleop to autonomous, this line shows up in the phone./
public class TemplateOpMode_Team11155TankOld extends OpMode {
    /* Declare OpMode members. */
    private ElapsedTime runtime = new ElapsedTime();

    private HardwareBallShooter robot   = new HardwareBallShooter();

    double CurrentServoPosition = robot.Servo_start_position;
    final double ServoIncrement = .01;

    int lastMotorDirection;
    int currentHeading=0;
    boolean up=true;
    double DriveMode;
    double slow=0.175;


    //public final static double CLAW_HOME = 0.2;
    /*
     * Code to run ONCE when the driver hits INIT
     */
    @Override
    public void init() {
        telemetry.addData("Status", "Initialized");
        robot.init(hardwareMap);
        robot.capBallLifter.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        robot.capBallLifter.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        robot.leftMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        robot.rightMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        lastMotorDirection=1;
        robot.gyro.calibrate();

        robot.setDriveEncoderMode(true);


        // Send telemetry message to alert driver that we are calibrating;
        telemetry.addData(">", "Calibrating Gyro");    //
        telemetry.update();






    }

    /*
     * Code to run REPEATEDLY after the driver hits INIT, but before they hit PLAY
     */
    @Override
    public void init_loop() {
        // Send telemetry message to alert driver that we are calibrating;

        // make sure the gyro is calibrated before continuing
       if (robot.gyro.isCalibrating()) {
           telemetry.addData(">", "Calibrating Gyro");    //
           telemetry.update();
        }
        else
       {
           telemetry.addData(">", "Gyro Calibrated");    //
           telemetry.update();
       }

    }

    /*
     * Code to run ONCE when the driver hits PLAY
     */
    @Override
    public void start() {
        runtime.reset();
        robot.gyro.resetZAxisIntegrator();
        telemetry.addData(">", "Robot Heading = %d", robot.gyro.getIntegratedZValue());
        telemetry.update();



    }

    /*
     * Code to run REPEATEDLY after the driver hits PLAY but before they hit STOP
     */
    @Override
    public void loop() {


        telemetry.addData("Status", "Running: " + runtime.toString());
        telemetry.addData("Ball held", robot.capBallClaw.getPosition()<0.7);
        telemetry.addData("Ball going up", up);
        //telemetry.addData("ServoStatus", "ServoPosition: " + String.format("%.3f", ServoPosition));

        if (gamepad2.a) {
            robot.shootBallFullPower(800);
        }
        if (gamepad2.b) {
            robot.shootBallControlled(1600,800);
        }
        if (gamepad2.x && runtime.seconds()<150) {
            robot.liftBall();
            robot.dcBallCollector.setPower(-0.8);
            robot.ballLifterLeft.setPosition(0);
            robot.ballLifterRight.setPosition(1);

        }
        if (gamepad2.y) {
            robot.stopLiftBall();
            robot.dcBallCollector.setPower(0);
            robot.ballLifterLeft.setPosition(robot.Hitech_Servo_Stop_Left);
            robot.ballLifterRight.setPosition(robot.Hitech_Servo_Stop_Right);

        }



        if (gamepad2.dpad_up) {
            if ((!robot.touchSensor.isPressed() || (robot.touchSensor.isPressed() && lastMotorDirection == -1)) && runtime.seconds() < 150) {
                robot.capBallLifter.setPower(1);
                if(!robot.touchSensor.isPressed())
                lastMotorDirection=1;
            }
            else if(robot.touchSensor.isPressed() && lastMotorDirection==1 ){
                robot.capBallLifter.setPower(0);
            }
        }


        if (gamepad2.dpad_down){
            if( (!robot.touchSensor.isPressed() || (robot.touchSensor.isPressed() && lastMotorDirection == 1)) && runtime.seconds() < 150) {

                robot.capBallLifter.setPower(-1);
                if(!robot.touchSensor.isPressed())
                    lastMotorDirection=-1;
            }
            else if(robot.touchSensor.isPressed() && lastMotorDirection==-1){
                robot.capBallLifter.setPower(0);
            }
        }


        if (!gamepad2.dpad_up && !gamepad2.dpad_down){
            robot.capBallLifter.setPower(0);
        }


        if (runtime.milliseconds()>= 149900){
            robot.capBallLifter.setPower(0);
        }


        if (gamepad2.dpad_left ){
            CurrentServoPosition = robot.Servo_max_position;
            //Range.clip(CurrentServoPosition, robot.Servo_min_position, robot.Servo_max_position);
            robot.capBallClaw.setPosition(CurrentServoPosition);
        }
        if (gamepad2.dpad_right ){
            CurrentServoPosition = robot.Servo_hold_position;
            //Range.clip(CurrentServoPosition, robot.Servo_min_position, robot.Servo_max_position);
            robot.capBallClaw.setPosition(CurrentServoPosition);
        }
        if (gamepad2.left_trigger > 0 && runtime.seconds()<150) {
            CurrentServoPosition+=ServoIncrement;
            CurrentServoPosition=Range.clip(CurrentServoPosition, robot.Servo_min_position, robot.Servo_max_position);
            robot.capBallClaw.setPosition(CurrentServoPosition);

        }
        if (gamepad2.right_trigger > 0 && runtime.seconds()<150) {
            CurrentServoPosition-=ServoIncrement;
            CurrentServoPosition=Range.clip(CurrentServoPosition, robot.Servo_min_position, robot.Servo_max_position);
            robot.capBallClaw.setPosition(CurrentServoPosition);

        }


        if (gamepad2.left_bumper && runtime.seconds()<150)
            robot.beaconButtonPusher.setPosition(robot.CONTINUOUS_SERVO_FORWARD);

        if (gamepad2.right_bumper && runtime.seconds()<150)
            robot.beaconButtonPusher.setPosition(robot.CONTINUOUS_SERVO_REVERSE);


        if (gamepad2.right_bumper == false && gamepad2.left_bumper == false)
            robot.beaconButtonPusher.setPosition(robot.CONTINUOUS_SERVO_stop);

/*==================================================================================================
        if (gamepad1.dpad_up && runtime.seconds()<150) {

            robot.ballFeeder.setPosition(robot.CONTINUOUS_SERVO_FORWARD);

            robot.ballFeeder.setPosition(robot.CONTINUOUS_SERVO_stop);
        }

        if (gamepad1.dpad_down && runtime.seconds()<150) {

            robot.ballFeeder.setPosition(robot.CONTINUOUS_SERVO_REVERSE);

            robot.ballFeeder.setPosition(robot.CONTINUOUS_SERVO_stop);
        }
*/
//-----Default Driving mode is to use the joystick-----------------------------------------------
        if(gamepad1.left_trigger==0 && gamepad1.right_trigger==0 && !gamepad1.dpad_left && !gamepad1.dpad_right && runtime.milliseconds()<149990 ) {
            DriveMode = 1;
            robot.leftWheelFront.setPower(-gamepad1.left_stick_y * DriveMode);
            robot.leftWheelBack.setPower(-gamepad1.left_stick_y * DriveMode);
            robot.rightWheelFront.setPower(-gamepad1.right_stick_y * DriveMode);
            robot.rightWheelBack.setPower(-gamepad1.right_stick_y * DriveMode);
            currentHeading = robot.gyro.getIntegratedZValue();
        }
       else {
//==================================================================================================



            if (gamepad1.left_trigger > 0 && runtime.milliseconds() < 149990) {
                robot.gyroDriveWithoutEncoder(robot.DRIVE_SPEED, 1, currentHeading);
            }


            if (gamepad1.right_trigger > 0 && runtime.milliseconds() < 149990 ) {
                robot.gyroDriveWithoutEncoder(robot.DRIVE_SPEED, -1, currentHeading);
            }


//==================================================================================================

            if (gamepad1.dpad_right && runtime.milliseconds() < 149990 ) {

                robot.leftWheelFront.setPower(slow);
                robot.leftWheelBack.setPower(slow);
                robot.rightWheelFront.setPower(-slow);
                robot.rightWheelBack.setPower(-slow);
            }


            if (gamepad1.dpad_left && runtime.milliseconds() < 149990 ) {
                robot.leftWheelFront.setPower(-slow);
                robot.leftWheelBack.setPower(-slow);
                robot.rightWheelFront.setPower(slow);
                robot.rightWheelBack.setPower(slow);
            }
        }

        if(runtime.milliseconds()>149990) {
            robot.stopRobot();
            robot.stopEffectors();
        }


    }








    /*
     * Code to run ONCE after the driver hits STOP
     */
    @Override
    public void stop() {
        robot.stopRobot();
        robot.stopEffectors();
        //drop game peice at the end of the game this is a good place.
    }
   public void waitformilliseconds(double ms) {
       double starttime=this.getRuntime();
       while (true) {
           if (this.getRuntime() > (ms+starttime)) {
               return;
           }

       }
   }

}
// One the phone check for developer options.  enable USB debugging
// green button play to run team code. if the phone is connected . Install USB drivers on the phone.
// ftc forums.
